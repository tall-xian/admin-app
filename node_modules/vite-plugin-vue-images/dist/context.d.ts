import { ResolvedConfig, ViteDevServer } from 'vite';
import { ImageInfo, Options } from './types';
export declare class Context {
    readonly viteConfig: ResolvedConfig;
    readonly options: Options;
    readonly globs: string[];
    private _imagePaths;
    private _imageNameMap;
    private _imageUsageMap;
    private _server;
    constructor(options: Options, viteConfig: ResolvedConfig);
    get root(): string;
    get dirs(): string[];
    get extensions(): string[];
    get searchRegex(): string;
    setServer(server: ViteDevServer): void;
    /**
     * Record the usage of images
     * @param path
     * @param paths paths of used images
     */
    updateUsageMap(path: string, paths: string[]): void;
    addImages(paths: string[]): boolean;
    removeImage(path: string): boolean;
    onUpdate(path: string): void;
    private updateImageNameMap;
    findImage(name: string, excludePaths?: string[]): ImageInfo | undefined;
    resolvePathAlias(path: string): string;
    private searchImages;
    _searched: boolean;
    /**
     * Search for images
     * Called multiple times to ensure file loaded, should normally run only once.
     */
    searchGlob(): void;
}
